{"version":3,"file":"static/js/913.9c41adb5.chunk.js","mappings":"2NACA,EAAkG,wCAAlG,EAAsJ,+B,kBCQzIA,EAAkB,SAACC,GAE5B,OAA8BC,EAAAA,EAAAA,WAAS,GAAvC,eAAKC,EAAL,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAASD,EAAMI,YAAzC,eAAKC,EAAL,KAAaC,EAAb,MAEAC,EAAAA,EAAAA,YAAU,WACND,EAAUN,EAAMI,cACjB,CAACJ,EAAMI,aA0BN,OACI,4BACMF,IAAY,0BACV,iBACIM,cA1BC,WACjBL,GAAY,IAwBA,SAGKH,EAAMI,YAAc,iBAI5BF,IAAY,0BACT,kBACIO,OA9BI,WACpBN,GAAY,GACZH,EAAMU,iBAAiBL,IA6BPM,WAAS,EACTC,MAAOP,EACPQ,SA5BG,SAACC,GACpBR,EAAUQ,EAAEC,cAAcH,gB,oBCdrBI,EAAyC,SAAChB,GAAW,IAAD,mCAE5CiB,EAAAA,EAAAA,MAQjB,OACI,0BACI,iBAAKC,UAAWC,EAAhB,WACI,gBAAKC,KAAK,UAAApB,EAAMqB,QAAQC,cAAd,eAAsBC,QAASC,EAAMN,UAAWC,EAAmBM,IAAI,MAChFzB,EAAM0B,UAAW,kBAAOC,KAAM,OAAQd,SAVlC,SAACC,GAAsC,IAAD,EACnD,UAAGA,EAAEc,OAAOC,aAAZ,OAAG,EAAgBC,QACf9B,EAAM+B,UAAUjB,EAAEc,OAAOC,MAAM,QAS3B,0BACI,wBAAK7B,EAAMqB,QAAQW,cAGvB,SAACjC,EAAD,CACIK,WAAYJ,EAAMK,OAAQK,iBAAkBV,EAAMU,oBACtD,wCACeV,EAAMqB,QAAQY,YAE7B,2CAEQ,0BACK,UAAAjC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBC,UAAW,wBAAKnC,EAAMqB,QAAQa,SAASC,YAAiB,wBACjF,UAAAnC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBE,QAAS,wBAAKpC,EAAMqB,QAAQa,SAASE,UAAe,wBAC7E,UAAApC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBG,IAAK,wBAAKrC,EAAMqB,QAAQa,SAASG,MAAY,wBACtE,UAAArC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBI,SAAU,0BAAKtC,EAAMqB,QAAQa,SAASI,QAA5B,QAA8C,wBACjF,UAAAtC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBK,WAAY,wBAAKvC,EAAMqB,QAAQa,SAASK,aAAmB,wBACpF,UAAAvC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBM,UAAW,wBAAKxC,EAAMqB,QAAQa,SAASM,YAAkB,wBAClF,UAAAxC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBO,SAAU,wBAAKzC,EAAMqB,QAAQa,SAASO,WAAiB,wBAChF,UAAAzC,EAAMqB,eAAN,mBAAea,gBAAf,SAAyBQ,SAAU,wBAAK1C,EAAMqB,QAAQa,SAASQ,WAAiB,+BAG7F,4BACI,gCACC1C,EAAMqB,QAAQsB,gBAAiB,mDAAgC,wCAC9D3C,EAAMqB,QAAQsB,gBAAiB,uBAAI3C,EAAMqB,QAAQuB,6BAAiC,iC,kBCvDxG,EAAuB,sBCAvB,EAAuB,mBCOVC,EAAO,SAAC7C,GACjB,OACI,iBAAKkB,UAAWC,EAAhB,WACI,gBACIC,IAAI,sGACJK,IAAI,WACPzB,EAAM8C,SACP,+BAAO9C,EAAM+C,MAAb,e,UCGZ,IAeaC,GAAmBC,EAAAA,EAAAA,KAfR,SAACC,GACrB,MAAO,CACHC,UAAWD,EAAME,YAAYC,MAC7BzC,MAAOsC,EAAME,YAAYE,gBAIN,SAACC,GACxB,MAAO,CACHC,QAAS,SAACC,GACNF,GAASG,EAAAA,EAAAA,IAAqBD,QAKVR,EC1BzB,SAAiBjD,GACpB2D,QAAQC,IAAI,mBACZD,QAAQC,IAAI5D,GAEZ,IAAI6D,GAAe,OAAI7D,EAAMmD,WAAWW,UAAUC,KAAI,SAAAC,GAAC,OAAI,SAACnB,EAAD,CAAiBC,QAASkB,EAAElB,QAASC,MAAOiB,EAAEC,YAAnCD,EAAEE,OAMxE,OACI,iBAAKhD,UAAWC,EAAhB,WACI,sCACA,0BACI,0BACI,SAACgD,EAAA,EAAD,CAAMC,YATC,SAACX,GACpBzD,EAAMwD,QAAQC,UAYTI,Q,UCjBAQ,EAAU,SAACrE,GACpB,IAAMsE,GAAgBC,EAAAA,EAAAA,KAAmC,SAAArB,GAAK,OAAIA,EAAME,YAAY/C,UAEpF,OADAsD,QAAQC,IAAI,kBACP5D,EAAMqB,SAEP,4BACI,SAACL,EAAD,CACIwD,UAAWxE,EAAMwE,UACjBnD,QAASrB,EAAMqB,QACfhB,OAAQiE,EACR5D,iBAAkBV,EAAMU,iBACxBgB,QAAS1B,EAAM0B,QACfK,UAAW/B,EAAM+B,aAErB,SAACiB,EAAD,QAXmB,SAACyB,EAAA,EAAD,K,8BCWzBC,EAAAA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,SAAAA,IAAAA,OAAAA,EAAAA,EAAAA,GAAAA,KAAAA,GAAAA,EAAAA,MAAAA,KAAAA,WA0CD,OA1CCA,EAAAA,EAAAA,GAAAA,EAAAA,CAAAA,CAAAA,IAAAA,iBAAAA,MAEF,WAUI,IAAIC,EAASC,KAAK5E,MAAM6E,MAAMC,OAAOH,OACjCA,IACAA,EAASC,KAAK5E,MAAM+E,iBAAmB,KAEnCH,KAAK5E,MAAMgF,QAAQC,KAAK,UAMhCL,KAAK5E,MAAMkF,qBAAqBP,GAChCC,KAAK5E,MAAMmF,eAAeR,KAC7B,+BAED,WACIC,KAAKQ,mBACR,gCAED,SAAmBC,EAAsCC,EAAyBC,GAC3EF,EAAUR,MAAMC,OAAOH,SAAWC,KAAK5E,MAAM6E,MAAMC,OAAOH,QACzDC,KAAKQ,mBAEZ,oBAED,WACI,OACI,+BACI,SAACf,GAAD,kBAAaO,KAAK5E,MAAMqB,SAAxB,IAAiCX,iBAAkBkE,KAAK5E,MAAMU,iBAAkBgB,SAAUkD,KAAK5E,MAAM6E,MAAMC,OAAOH,OAAQ5C,UAAW6C,KAAK5E,MAAM+B,mBAG3J,EA1CC2C,CAAyBc,EAAAA,WAiF/B,GAAeC,EAAAA,EAAAA,KAA6BxC,EAAAA,EAAAA,KArBpB,SAACC,GAErB,OADAS,QAAQC,IAAI,kCACL,CACHvC,QAAS6B,EAAME,YACf2B,iBAAkB7B,EAAMwC,KAAKxB,MAiBgC,CACjEgB,oBAAqBA,EAAAA,GACrBC,cAAeQ,EAAAA,GACfjF,iBAAkBkF,EAAAA,GAClB7D,UAAW8D,EAAAA,KACXC,EAAAA,EAAkBC,EAAAA,GALtB,CAKkCrB,I","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusFC.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_imgWrapper\":\"ProfileInfo_profile_imgWrapper__xM-2D\",\"profileDescription\":\"ProfileInfo_profileDescription__PVm52\",\"mainPhoto\":\"ProfileInfo_mainPhoto__+XkrS\"};","import * as React from 'react';\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusFC = (props: ProfileStatusPropsType) =>  {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.userStatus)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.userStatus)\r\n    }, [props.userStatus])\r\n\r\n    // в объекте для изменения стейта внутри объекта есть метод setState. Сам метод асинхронен, т.е. снаачла отработает функция, и отправит данные для изменения стейта в event loop. Затем, когда цикл дойдёт до выполнения этой задачи, выполнится функция, что приведет к изменению данных, и начнётся перерисовка React-ом приложения.\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateMode =  () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    // componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\r\n    //     let state = this.state.status\r\n    //     if(this.props.userStatus !== prevProps.userStatus) {\r\n    //         this.setState({\r\n    //             status: this.props.userStatus\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n        return (\r\n            <div>\r\n                {!editMode && <div>\r\n                    <span\r\n                        onDoubleClick={activateMode}\r\n                        >\r\n                        {props.userStatus || '----------'}\r\n                    </span>\r\n                </div>}\r\n\r\n                {editMode && <div>\r\n                    <input\r\n                        onBlur={deactivateMode}\r\n                        autoFocus\r\n                        value={status}\r\n                        onChange={onStatusChange}\r\n                    />\r\n                </div>}\r\n            </div>\r\n        )\r\n};","import React, {ChangeEvent, MouseEvent} from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport {updateProfilePhotoTC, UserProfileType} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusFC} from \"./ProfileStatusFC\";\r\nimport img from \"../../Users/img/pngtree-user-vector-avatar-png-image_1541962.jpg\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    imageLink: string\r\n    profile: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n}\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const setPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if(e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.profileDescription}>\r\n                <img src={props.profile.photos?.large || img } className={classes.mainPhoto} alt=\"#\"/>\r\n                {props.isOwner && <input type={\"file\"} onChange={setPhoto}/>}\r\n                <div>\r\n                    <h2>{props.profile.fullName}</h2>\r\n                </div>\r\n\r\n                <ProfileStatusFC\r\n                    userStatus={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                <div>\r\n                    About me: {props.profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    My Contacts:\r\n                        <ul>\r\n                            {props.profile?.contacts?.facebook ? <li>{props.profile.contacts.facebook}</li> : <></> }\r\n                            {props.profile?.contacts?.github ? <li>{props.profile.contacts.github}</li> : <></> }\r\n                            {props.profile?.contacts?.vk ? <li>{props.profile.contacts.vk }</li> : <></> }\r\n                            {props.profile?.contacts?.twitter ? <li>{props.profile.contacts.twitter } </li> : <></> }\r\n                            {props.profile?.contacts?.instagram ? <li>{props.profile.contacts.instagram }</li> : <></> }\r\n                            {props.profile?.contacts?.mainLink ? <li>{props.profile.contacts.mainLink }</li> : <></> }\r\n                            {props.profile?.contacts?.website ? <li>{props.profile.contacts.website }</li> : <></> }\r\n                            {props.profile?.contacts?.youtube ? <li>{props.profile.contacts.youtube }</li> : <></> }\r\n                        </ul>\r\n                </div>\r\n                <div>\r\n                    <h3>Job</h3>\r\n                    {props.profile.lookingForAJob ? <p>I am looking for a job</p> : <p>I have a job</p> }\r\n                    { props.profile.lookingForAJob ? <p>{props.profile.lookingForAJobDescription}</p> : <></> }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__Bkf2q\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__apsvX\"};","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likes: number,\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://img.lovepik.com/original_origin_pic/18/08/08/0aaca4059b482f768b87625f9fd241e3.png_wh860.png\"\r\n                alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>+{props.likes} Like</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {addPostActionCreator, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {AllActionTypes} from \"../../../redux/store\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducersType} from \"../../../redux/redux-store\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    postsData: PostsType[]\r\n    value: string\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPost: string) => void\r\n}\r\nexport type PostsContainerType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: RootReducersType): MapStatePropsType => {\r\n    return {\r\n        postsData: state.profilePage.posts,\r\n        value: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: AllActionTypes) => void): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostActionCreator(newPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsContainerType} from \"./MyPostsContainer\";\r\nimport {Form} from \"../../common/Form\";\r\n\r\n\r\nexport function MyPosts(props: PostsContainerType) {\r\n    console.log('RENDER MY POSTS')\r\n    console.log(props)\r\n\r\n    let postsElement = [...props.postsData].reverse().map(p => <Post key={p.id} message={p.message} likes={p.likesCount}/>)\r\n\r\n    const onClickHandler = (newPost: string) => {\r\n        props.addPost(newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <Form sendMessage={onClickHandler}/>\r\n                </div>\r\n            </div>\r\n\r\n            {postsElement}\r\n            {/*тут сидят компоненты, которые поочередно проходят через map и преобразуются с учётом полученных значений из BLL*/}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfilePageType} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducersType} from \"../../redux/redux-store\";\r\n\r\n\r\nexport const Profile = (props: ProfilePageType & {savePhoto: (file: any) => void}) => {\r\n    const profileStatus = useSelector<RootReducersType, any>(state => state.profilePage.status)\r\n    console.log('RENDER PROFILE')\r\n    if (!props.profile) return <Preloader/>\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                imageLink={props.imageLink}\r\n                profile={props.profile}\r\n                status={profileStatus}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    ProfilePageType,\r\n    profileStatusTC,\r\n    profileThunkCreator, updateProfilePhotoTC,\r\n    updateStatusTC,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RootReducersType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\n\r\ntype AllProfileType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype userIdType = {\r\n    userId: string\r\n}\r\n\r\ntype RouterPropsType = RouteComponentProps<userIdType> & AllProfileType\r\n\r\nclass ProfileContainer extends React.Component<RouterPropsType> {\r\n\r\n    refreshProfile() {\r\n        // let userId = !this.props.match.params.userId ? '27215' :\r\n        //     this.props.match.params.userId\r\n\r\n        // let userId = !this.props.match.params.userId ? '27215' :\r\n        //     this.props.match.params.userId\r\n\r\n\r\n        //? this.props.history.push('/login') :\r\n\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorisedUserId + ''\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n            // if(!userId) {\r\n            //     this.props.history.push('/login')\r\n            // }\r\n        }\r\n        this.props.profileThunkCreator(+userId)\r\n        this.props.setUserStatus(+userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RouterPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile {...this.props.profile} updateUserStatus={this.props.updateUserStatus} isOwner={!this.props.match.params.userId} savePhoto={this.props.savePhoto} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePageType\r\n    authorisedUserId: number | null\r\n\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setUserProfile: (profileData: UserProfileType) => void\r\n    profileThunkCreator: (userId: number) => void\r\n    setUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: RootReducersType): MapStateToPropsType => {\r\n    console.log('MapStateToProps change profile')\r\n    return {\r\n        profile: state.profilePage,\r\n        authorisedUserId: state.auth.id\r\n    }\r\n}\r\n\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch): MapDispatchToPropsType => {\r\n//     return {\r\n//         setUserProfile: (userProfile: UserProfileType) => {\r\n//             dispatch(setUsersProfileAC(userProfile))\r\n//         },\r\n//         profileThunkCreator: profileThunkCreator,\r\n//         setUserStatus: profileStaretusTC\r\n//     }\r\n// }\r\n\r\n//export default compose<React.FC>(withRouter, WithAuthRedirect, connect(mapStateToProps, {profileThunkCreator: profileThunkCreator}))(ProfileContainer)\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    profileThunkCreator: profileThunkCreator,\r\n    setUserStatus: profileStatusTC,\r\n    updateUserStatus: updateStatusTC,\r\n    savePhoto: updateProfilePhotoTC\r\n}), WithAuthRedirect, withRouter)(ProfileContainer)\r\n\r\n// const AuthRedirectComponent = WithAuthRedirect(ProfileContainer)\r\n//\r\n// const ProfileUserIdCount = withRouter(AuthRedirectComponent)\r\n//\r\n// export default connect(mapStateToProps, {profileThunkCreator: profileThunkCreator})(ProfileUserIdCount);\r\n"],"names":["ProfileStatusFC","props","useState","editMode","setEditMode","userStatus","status","setStatus","useEffect","onDoubleClick","onBlur","updateUserStatus","autoFocus","value","onChange","e","currentTarget","ProfileInfo","useDispatch","className","classes","src","profile","photos","large","img","alt","isOwner","type","target","files","length","savePhoto","fullName","aboutMe","contacts","facebook","github","vk","twitter","instagram","mainLink","website","youtube","lookingForAJob","lookingForAJobDescription","Post","message","likes","MyPostsContainer","connect","state","postsData","profilePage","posts","newPostText","dispatch","addPost","newPost","addPostActionCreator","console","log","postsElement","reverse","map","p","likesCount","id","Form","sendMessage","Profile","profileStatus","useSelector","imageLink","Preloader","ProfileContainer","userId","this","match","params","authorisedUserId","history","push","profileThunkCreator","setUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","profileStatusTC","updateStatusTC","updateProfilePhotoTC","WithAuthRedirect","withRouter"],"sourceRoot":""}