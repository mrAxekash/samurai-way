{"version":3,"file":"static/js/110.2a6fa628.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusFC.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"profile_imgWrapper\":\"ProfileInfo_profile_imgWrapper__xM-2D\",\"profileDescription\":\"ProfileInfo_profileDescription__PVm52\",\"mainPhoto\":\"ProfileInfo_mainPhoto__+XkrS\",\"contacts\":\"ProfileInfo_contacts__gKKXI\",\"error\":\"ProfileInfo_error__13ngG\"};","import * as React from 'react';\r\nimport {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\n\r\ntype ProfileStatusPropsType = {\r\n    userStatus: string\r\n    updateUserStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusFC = (props: ProfileStatusPropsType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.userStatus)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.userStatus)\r\n    }, [props.userStatus])\r\n\r\n    // в объекте для изменения стейта внутри объекта есть метод setState. Сам метод асинхронен, т.е. снаачла отработает функция, и отправит данные для изменения стейта в event loop. Затем, когда цикл дойдёт до выполнения этой задачи, выполнится функция, что приведет к изменению данных, и начнётся перерисовка React-ом приложения.\r\n\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    // componentDidUpdate(prevProps: Readonly<ProfileStatusPropsType>, prevState: Readonly<{}>) {\r\n    //     let state = this.state.status\r\n    //     if(this.props.userStatus !== prevProps.userStatus) {\r\n    //         this.setState({\r\n    //             status: this.props.userStatus\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <b>\r\n                Status:\r\n            </b>\r\n            {!editMode && <>\r\n                    <span\r\n                        onDoubleClick={activateMode}\r\n                    >\r\n                        { ` ${props.userStatus}` || '----------' }\r\n                    </span>\r\n            </>}\r\n\r\n            {editMode && <>\r\n                <input\r\n                    onBlur={deactivateMode}\r\n                    autoFocus\r\n                    value={status}\r\n                    onChange={onStatusChange}\r\n                />\r\n            </>}\r\n        </div>\r\n    )\r\n};","import React from \"react\";\r\nimport {Contact, KeyType, ProfileDataType} from \"./ProfileInfo\";\r\nimport {SubmitHandler, useForm} from \"react-hook-form\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport classes from './ProfileInfo.module.css';\r\n\r\n//types\r\n\r\nexport type CutomFormData = {\r\n    userId: string\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription?: string\r\n    aboutMe: string\r\n    contacts: {\r\n        github: string\r\n        vk: string\r\n        facebook: string\r\n        instagram: string\r\n        twitter: string\r\n        website: string\r\n        youtube: string\r\n        mainLink: string\r\n    }\r\n}\r\nexport const ProfileDataForm = (props: ProfileDataType) => {\r\n\r\n    const {\r\n        register,\r\n        formState: {errors},\r\n        handleSubmit,\r\n        reset,\r\n        setError\r\n    } = useForm<CutomFormData>({\r\n        mode: 'onBlur',\r\n        defaultValues: {\r\n            fullName: props.profile.fullName,\r\n            lookingForAJob: props.profile.lookingForAJob,\r\n            lookingForAJobDescription: props.profile.lookingForAJobDescription,\r\n            contacts: props.profile.contacts\r\n        },\r\n    })\r\n\r\n    const onSubmit: SubmitHandler<CutomFormData> = (data) => {\r\n        props.onSubmit?.(data)\r\n    }\r\n\r\n    // setError('contacts.facebook', {message: props.statusError})\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n            <div>\r\n                {\r\n                    props.statusError !== null ? props.statusError?.map(error => <p className={classes.error}>{error}</p> ) : ''\r\n                }\r\n            </div>\r\n            <div>\r\n                <button type={\"submit\"}>Save profile</button>\r\n            </div>\r\n            <div>\r\n                <input {\r\n                           ...register('fullName', {\r\n                               value: props.profile.fullName,\r\n                               required: 'This place is required',\r\n                           })\r\n                       }\r\n                       type=\"text\"\r\n                />\r\n            </div>\r\n            <div>\r\n                <label><b>Looking for a job: </b></label>\r\n                <input {\r\n                           ...register('lookingForAJob', {})\r\n                       }\r\n                       type=\"checkbox\"/>\r\n            </div>\r\n            <div>\r\n                <label> <b> My professional skills: </b> </label>\r\n                <input {\r\n                           ...register('lookingForAJobDescription', {})\r\n                       }\r\n                       type=\"text\"\r\n                       placeholder={'My professional skills'}/>\r\n            </div>\r\n            <div>\r\n                <label><b>About me: </b></label>\r\n                <input {...register('aboutMe', {value: props.profile.aboutMe})}\r\n                       type=\"text\"\r\n                       placeholder={'Tell us about yourself'}\r\n                       className={errors.aboutMe ? errors.aboutMe.message : ''}\r\n                />\r\n                <p className={errors.aboutMe ? errors.aboutMe.message : ''}>{errors.aboutMe?.message}</p>\r\n            </div>\r\n            <div>\r\n                <label><b>My Contacts:</b></label>\r\n                <div>\r\n                    {props.profile.contacts && Object.keys(props.profile.contacts).map(key => {\r\n                        return <div key={key}>\r\n                            <label><b>{key}:</b></label>\r\n                            <input type={'text'} {...register(`contacts.${key}` as any, {\r\n                                value: `${props.profile.contacts}.${key}`\r\n                            })}\r\n                            />\r\n                        </div>\r\n                    })}\r\n                </div>\r\n\r\n                {/*<Controller render={(props.profile.contacts) => <input {...props.profile.contacts}/> } name={}*/}\r\n\r\n                {/*{Object.keys(props.profile.contacts).map(key => {*/}\r\n                {/*    return <input key={key} type=\"text\" {...register('contacts', {*/}\r\n                {/*        value: {},*/}\r\n\r\n                {/*    })} />*/}\r\n                {/*})}*/}\r\n\r\n                {/*<input type=\"text\" {...register('contacts', {})} />*/}\r\n\r\n\r\n                {/*{props.profile.contacts && Object.keys(props.profile.contacts).map(key => {*/}\r\n                {/*    return <Contact key={key}*/}\r\n                {/*                    contactTitle={key}*/}\r\n                {/*                    contactValue={props.profile?.contacts[key as KeyType]}/>*/}\r\n                {/*})}*/}\r\n\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n","import React, {ChangeEvent, useState} from \"react\";\r\nimport classes from './ProfileInfo.module.css';\r\nimport {\r\n    UserProfileType\r\n} from \"../../../redux/profile-reducer\";\r\nimport {ProfileStatusFC} from \"./ProfileStatusFC\";\r\nimport img from \"../../Users/img/pngtree-user-vector-avatar-png-image_1541962.jpg\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CutomFormData, ProfileDataForm} from \"./ProfileDataForm\";\r\n\r\n\r\ntype ProfileInfoType = {\r\n    imageLink: string\r\n    profile: UserProfileType\r\n    status: string\r\n    updateUserStatus: (status: string) => void\r\n    isOwner: boolean\r\n    savePhoto: (file: any) => void\r\n    updateProfileData: (data: CutomFormData) => void\r\n    profileUpdateStatus: boolean\r\n    statusError: null | string[]\r\n    changeProfileUpdateStatusAC: (newStatus: boolean) => void\r\n}\r\n\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n\r\n    const setPhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const editModeHandler = (editMode: boolean) => {\r\n        props.changeProfileUpdateStatusAC(editMode)\r\n    }\r\n\r\n    const onSubmit = async (data: CutomFormData) => {\r\n        props.updateProfileData(data)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.profileDescription}>\r\n                <img src={props.profile.photos?.large || img} className={classes.mainPhoto} alt=\"#\"/>\r\n                {props.isOwner && <input type={\"file\"} onChange={setPhoto}/>}\r\n\r\n                {props.profileUpdateStatus ?\r\n                    <ProfileDataForm\r\n                        onSubmit={onSubmit}\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n                        toEditMode={editModeHandler}\r\n                        profileUpdateStatus={props.profileUpdateStatus}\r\n                        changeProfileUpdateStatusAC={props.changeProfileUpdateStatusAC}\r\n                        statusError={props.statusError}\r\n                    />\r\n                    : <ProfileData\r\n                        profile={props.profile}\r\n                        isOwner={props.isOwner}\r\n                        toEditMode={editModeHandler}  />}\r\n\r\n                <ProfileStatusFC\r\n                    userStatus={props.status}\r\n                    updateUserStatus={props.updateUserStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Contact: React.FC<{ contactTitle: string | null, contactValue: any }> = (props) => {\r\n    return (\r\n        <div className={classes.contacts}>\r\n            <b>{props.contactTitle}: </b> {props.contactValue}\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport const ProfileData = (props: ProfileDataType) => {\r\n\r\n    return (<>\r\n            <div>\r\n                {props.isOwner && <button onClick={() => props.toEditMode(true)}>Edit profile</button> }\r\n            </div>\r\n            <div>\r\n                <h2>{props.profile.fullName}</h2>\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job: </b> {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n            </div>\r\n            <div><b> Looking for a job description: </b> {props.profile.lookingForAJobDescription}  </div>\r\n            <div>\r\n                <b>About me: </b> {props.profile.aboutMe}\r\n            </div>\r\n            <div>\r\n                <b>My Contacts:</b>\r\n                {props.profile.contacts && Object.keys(props.profile.contacts).map(key => {\r\n                    return <Contact key={key}\r\n                                    contactTitle={key}\r\n                                    contactValue={props.profile?.contacts[key as KeyType]}/>\r\n                })}\r\n\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\n\r\n//types\r\n\r\nexport type ProfileDataType = {\r\n    profile: UserProfileType\r\n    isOwner: boolean\r\n    toEditMode: (editMode: boolean) => void\r\n    onSubmit?: (data: CutomFormData) => void\r\n    profileUpdateStatus?: boolean\r\n    changeProfileUpdateStatusAC?: (newStatus: boolean) => void\r\n    statusError?: null | string[]\r\n}\r\nexport type KeyType = 'github' &\r\n    'vk' &\r\n    'facebook' &\r\n    'instagram' &\r\n    'twitter' &\r\n    'website' &\r\n    'youtube' &\r\n    'mainLink'","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"MyPosts_item__Bkf2q\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__apsvX\"};","import React from \"react\";\r\nimport classes from './Post.module.css';\r\n\r\ntype PostType = {\r\n    message: string,\r\n    likes: number,\r\n}\r\n\r\nexport const Post = (props: PostType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <img\r\n                src=\"https://img.lovepik.com/original_origin_pic/18/08/08/0aaca4059b482f768b87625f9fd241e3.png_wh860.png\"\r\n                alt=\"avatar\"/>\r\n            {props.message}\r\n            <div>+{props.likes} Like</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {addPostActionCreator, PostsType} from \"../../../redux/profile-reducer\";\r\nimport {AllActionTypes} from \"../../../redux/store\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootReducersType} from \"../../../redux/redux-store\";\r\n\r\n\r\nexport type MapStatePropsType = {\r\n    postsData: PostsType[]\r\n    value: string\r\n}\r\n\r\nexport type MapDispatchPropsType = {\r\n    addPost: (newPost: string) => void\r\n}\r\nexport type PostsContainerType = MapStatePropsType & MapDispatchPropsType\r\n\r\nconst mapStateToProps = (state: RootReducersType): MapStatePropsType => {\r\n    return {\r\n        postsData: state.profilePage.posts,\r\n        value: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: (action: AllActionTypes) => void): MapDispatchPropsType => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPostActionCreator(newPost))\r\n        },\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from \"react\";\r\nimport classes from './MyPosts.module.css';\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostsContainerType} from \"./MyPostsContainer\";\r\nimport {Form} from \"../../common/Form\";\r\n\r\n\r\nexport function MyPosts(props: PostsContainerType) {\r\n    console.log('RENDER MY POSTS')\r\n    console.log(props)\r\n\r\n    let postsElement = [...props.postsData].reverse().map(p => <Post key={p.id} message={p.message} likes={p.likesCount}/>)\r\n\r\n    const onClickHandler = (newPost: string) => {\r\n        props.addPost(newPost)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.item}>\r\n            <h3>My posts</h3>\r\n            <div>\r\n                <div>\r\n                    <Form sendMessage={onClickHandler}/>\r\n                </div>\r\n            </div>\r\n\r\n            {postsElement}\r\n            {/*тут сидят компоненты, которые поочередно проходят через map и преобразуются с учётом полученных значений из BLL*/}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ChangeProfileUpdateStatusACType, ProfilePageType} from \"../../redux/profile-reducer\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootReducersType} from \"../../redux/redux-store\";\r\nimport {CutomFormData} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\nexport const Profile = (props: ProfilePageType & {savePhoto: (file: any) => void, updateProfileData: (data: CutomFormData) => void, profileUpdateStatus: boolean, statusError: null | string[], changeProfileUpdateStatusAC: (newStatus: boolean) => void}) => {\r\n    const profileStatus = useSelector<RootReducersType, any>(state => state.profilePage.status)\r\n    console.log('RENDER PROFILE')\r\n    if (!props.profile) return <Preloader/>\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                imageLink={props.imageLink}\r\n                profile={props.profile}\r\n                status={profileStatus}\r\n                updateUserStatus={props.updateUserStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                updateProfileData={props.updateProfileData}\r\n                profileUpdateStatus={props.profileUpdateStatus}\r\n                statusError={props.statusError}\r\n                changeProfileUpdateStatusAC={props.changeProfileUpdateStatusAC}\r\n            />\r\n            <MyPostsContainer />\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    changeProfileUpdateStatusAC, ChangeProfileUpdateStatusACType,\r\n    ProfilePageType,\r\n    profileStatusTC,\r\n    profileThunkCreator, updateProfileDataTC, updateProfilePhotoTC,\r\n    updateStatusTC,\r\n    UserProfileType\r\n} from \"../../redux/profile-reducer\";\r\nimport {RootReducersType} from \"../../redux/redux-store\";\r\nimport {compose} from \"redux\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {CutomFormData} from \"./ProfileInfo/ProfileDataForm\";\r\n\r\nclass ProfileContainer extends React.Component<RouterPropsType> {\r\n\r\n\r\n    refreshProfile() {\r\n\r\n        let userId = this.props.match.params.userId\r\n        if(!userId) {\r\n            userId = this.props.authorisedUserId + ''\r\n            if(!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.profileThunkCreator(+userId)\r\n        this.props.setUserStatus(+userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<RouterPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(prevProps.match.params.userId !== this.props.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Profile\r\n                    {...this.props.profile}\r\n                    updateUserStatus={this.props.updateUserStatus}\r\n                    isOwner={!this.props.match.params.userId}\r\n                    savePhoto={this.props.savePhoto}\r\n                    updateProfileData={this.props.updateProfileData}\r\n                    profileUpdateStatus={this.props.profileUpdateStatus}\r\n                    statusError={this.props.statusError}\r\n                    changeProfileUpdateStatusAC={this.props.changeProfileUpdateStatusAC}\r\n                />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: RootReducersType): MapStateToPropsType => {\r\n    console.log('MapStateToProps change profile')\r\n    return {\r\n        profile: state.profilePage,\r\n        authorisedUserId: state.auth.id,\r\n        statusError: state.profilePage.statusError,\r\n        profileUpdateStatus: state.profilePage.profileUpdateStatus\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(connect(mapStateToProps, {\r\n    profileThunkCreator: profileThunkCreator,\r\n    setUserStatus: profileStatusTC,\r\n    updateUserStatus: updateStatusTC,\r\n    savePhoto: updateProfilePhotoTC,\r\n    updateProfileData: updateProfileDataTC,\r\n    changeProfileUpdateStatusAC: changeProfileUpdateStatusAC\r\n\r\n}), WithAuthRedirect, withRouter)(ProfileContainer)\r\n\r\n\r\n//types\r\n\r\ntype AllProfileType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\ntype userIdType = {\r\n    userId: string\r\n}\r\n\r\ntype RouterPropsType = RouteComponentProps<userIdType> & AllProfileType\r\n\r\ntype MapStateToPropsType = {\r\n    profile: ProfilePageType\r\n    authorisedUserId: number | null\r\n    profileUpdateStatus: boolean\r\n    statusError: string[] | null\r\n}\r\n\r\ntype MapDispatchToPropsType = {\r\n    setUserProfile: (profileData: UserProfileType) => void\r\n    profileThunkCreator: (userId: number) => void\r\n    setUserStatus: (userId: number) => void\r\n    updateUserStatus: (status: string) => void\r\n    savePhoto: (file: any) => void\r\n    updateProfileData: (data: CutomFormData) => void\r\n    changeProfileUpdateStatusAC: (newStatus: boolean) => void\r\n}"],"names":["ProfileStatusFC","props","useState","editMode","setEditMode","userStatus","status","setStatus","useEffect","onDoubleClick","onBlur","updateUserStatus","autoFocus","value","onChange","e","currentTarget","ProfileDataForm","useForm","mode","defaultValues","fullName","profile","lookingForAJob","lookingForAJobDescription","contacts","register","errors","formState","handleSubmit","reset","setError","onSubmit","data","statusError","map","error","className","classes","type","required","placeholder","aboutMe","message","Object","keys","key","ProfileInfo","editModeHandler","changeProfileUpdateStatusAC","updateProfileData","src","photos","large","img","alt","isOwner","target","files","length","savePhoto","profileUpdateStatus","toEditMode","ProfileData","Contact","contactTitle","contactValue","onClick","Post","likes","MyPostsContainer","connect","state","postsData","profilePage","posts","newPostText","dispatch","addPost","newPost","addPostActionCreator","console","log","postsElement","reverse","p","likesCount","id","Form","sendMessage","Profile","profileStatus","useSelector","imageLink","Preloader","ProfileContainer","userId","this","match","params","authorisedUserId","history","push","profileThunkCreator","setUserStatus","refreshProfile","prevProps","prevState","snapshot","React","compose","auth","profileStatusTC","updateStatusTC","updateProfilePhotoTC","updateProfileDataTC","WithAuthRedirect","withRouter"],"sourceRoot":""}